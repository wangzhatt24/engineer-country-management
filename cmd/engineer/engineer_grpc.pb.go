// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc3
// source: engineer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EngineerService_AddEngineer_FullMethodName     = "/engineer.v1.EngineerService/AddEngineer"
	EngineerService_ListEngineers_FullMethodName   = "/engineer.v1.EngineerService/ListEngineers"
	EngineerService_GetEngineerById_FullMethodName = "/engineer.v1.EngineerService/GetEngineerById"
	EngineerService_UpdateEngineer_FullMethodName  = "/engineer.v1.EngineerService/UpdateEngineer"
	EngineerService_DeleteEngineer_FullMethodName  = "/engineer.v1.EngineerService/DeleteEngineer"
)

// EngineerServiceClient is the client API for EngineerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineerServiceClient interface {
	AddEngineer(ctx context.Context, in *AddEngineerRequest, opts ...grpc.CallOption) (*Engineer, error)
	ListEngineers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Engineers, error)
	GetEngineerById(ctx context.Context, in *GetEngineerByIdRequest, opts ...grpc.CallOption) (*Engineer, error)
	UpdateEngineer(ctx context.Context, in *UpdateEngineerRequest, opts ...grpc.CallOption) (*Engineer, error)
	DeleteEngineer(ctx context.Context, in *DeleteEngineerRequest, opts ...grpc.CallOption) (*Engineer, error)
}

type engineerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineerServiceClient(cc grpc.ClientConnInterface) EngineerServiceClient {
	return &engineerServiceClient{cc}
}

func (c *engineerServiceClient) AddEngineer(ctx context.Context, in *AddEngineerRequest, opts ...grpc.CallOption) (*Engineer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Engineer)
	err := c.cc.Invoke(ctx, EngineerService_AddEngineer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineerServiceClient) ListEngineers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Engineers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Engineers)
	err := c.cc.Invoke(ctx, EngineerService_ListEngineers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineerServiceClient) GetEngineerById(ctx context.Context, in *GetEngineerByIdRequest, opts ...grpc.CallOption) (*Engineer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Engineer)
	err := c.cc.Invoke(ctx, EngineerService_GetEngineerById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineerServiceClient) UpdateEngineer(ctx context.Context, in *UpdateEngineerRequest, opts ...grpc.CallOption) (*Engineer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Engineer)
	err := c.cc.Invoke(ctx, EngineerService_UpdateEngineer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineerServiceClient) DeleteEngineer(ctx context.Context, in *DeleteEngineerRequest, opts ...grpc.CallOption) (*Engineer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Engineer)
	err := c.cc.Invoke(ctx, EngineerService_DeleteEngineer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineerServiceServer is the server API for EngineerService service.
// All implementations must embed UnimplementedEngineerServiceServer
// for forward compatibility.
type EngineerServiceServer interface {
	AddEngineer(context.Context, *AddEngineerRequest) (*Engineer, error)
	ListEngineers(context.Context, *emptypb.Empty) (*Engineers, error)
	GetEngineerById(context.Context, *GetEngineerByIdRequest) (*Engineer, error)
	UpdateEngineer(context.Context, *UpdateEngineerRequest) (*Engineer, error)
	DeleteEngineer(context.Context, *DeleteEngineerRequest) (*Engineer, error)
	mustEmbedUnimplementedEngineerServiceServer()
}

// UnimplementedEngineerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEngineerServiceServer struct{}

func (UnimplementedEngineerServiceServer) AddEngineer(context.Context, *AddEngineerRequest) (*Engineer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEngineer not implemented")
}
func (UnimplementedEngineerServiceServer) ListEngineers(context.Context, *emptypb.Empty) (*Engineers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEngineers not implemented")
}
func (UnimplementedEngineerServiceServer) GetEngineerById(context.Context, *GetEngineerByIdRequest) (*Engineer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngineerById not implemented")
}
func (UnimplementedEngineerServiceServer) UpdateEngineer(context.Context, *UpdateEngineerRequest) (*Engineer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEngineer not implemented")
}
func (UnimplementedEngineerServiceServer) DeleteEngineer(context.Context, *DeleteEngineerRequest) (*Engineer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEngineer not implemented")
}
func (UnimplementedEngineerServiceServer) mustEmbedUnimplementedEngineerServiceServer() {}
func (UnimplementedEngineerServiceServer) testEmbeddedByValue()                         {}

// UnsafeEngineerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineerServiceServer will
// result in compilation errors.
type UnsafeEngineerServiceServer interface {
	mustEmbedUnimplementedEngineerServiceServer()
}

func RegisterEngineerServiceServer(s grpc.ServiceRegistrar, srv EngineerServiceServer) {
	// If the following call pancis, it indicates UnimplementedEngineerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EngineerService_ServiceDesc, srv)
}

func _EngineerService_AddEngineer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEngineerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineerServiceServer).AddEngineer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineerService_AddEngineer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineerServiceServer).AddEngineer(ctx, req.(*AddEngineerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineerService_ListEngineers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineerServiceServer).ListEngineers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineerService_ListEngineers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineerServiceServer).ListEngineers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineerService_GetEngineerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngineerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineerServiceServer).GetEngineerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineerService_GetEngineerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineerServiceServer).GetEngineerById(ctx, req.(*GetEngineerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineerService_UpdateEngineer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEngineerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineerServiceServer).UpdateEngineer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineerService_UpdateEngineer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineerServiceServer).UpdateEngineer(ctx, req.(*UpdateEngineerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineerService_DeleteEngineer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEngineerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineerServiceServer).DeleteEngineer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineerService_DeleteEngineer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineerServiceServer).DeleteEngineer(ctx, req.(*DeleteEngineerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineerService_ServiceDesc is the grpc.ServiceDesc for EngineerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engineer.v1.EngineerService",
	HandlerType: (*EngineerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEngineer",
			Handler:    _EngineerService_AddEngineer_Handler,
		},
		{
			MethodName: "ListEngineers",
			Handler:    _EngineerService_ListEngineers_Handler,
		},
		{
			MethodName: "GetEngineerById",
			Handler:    _EngineerService_GetEngineerById_Handler,
		},
		{
			MethodName: "UpdateEngineer",
			Handler:    _EngineerService_UpdateEngineer_Handler,
		},
		{
			MethodName: "DeleteEngineer",
			Handler:    _EngineerService_DeleteEngineer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engineer.proto",
}
